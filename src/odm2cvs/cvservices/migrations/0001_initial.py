# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import datetime
from django.utils.timezone import utc
import uuid


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('produces_result', models.CharField(max_length=5, db_column='producesResult', choices=[('Yes', 'Yes'), ('No', 'No')])),
            ],
            options={
                'verbose_name': 'Action Type',
                'db_table': 'ActionTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ActionTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
                ('produces_result', models.CharField(max_length=5, db_column='producesResult', choices=[('Yes', 'Yes'), ('No', 'No')])),
            ],
            options={
                'verbose_name': 'Action Type Request',
                'db_table': 'ActionTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AggregationStatistic',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Aggregation Statistic',
                'db_table': 'AggregationStatisticCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AggregationStatisticRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Aggregation Statistic Request',
                'db_table': 'AggregationStatisticCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AnnotationType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Annotation Type',
                'db_table': 'AnnotationTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='AnnotationTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Annotation Type Request',
                'db_table': 'AnnotationTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CensorCode',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Censor Code',
                'db_table': 'CensorCodeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='CensorCodeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Censor Code Request',
                'db_table': 'CensorCodeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DatasetType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Dataset Type',
                'db_table': 'DatasetTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DatasetTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Dataset Type Request',
                'db_table': 'DatasetTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DirectiveType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Directive Type',
                'db_table': 'DirectiveTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='DirectiveTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Directive Type Request',
                'db_table': 'DirectiveTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ElevationDatum',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Elevation Datum',
                'db_table': 'ElevationDatumCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ElevationDatumRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Elevation Datum Request',
                'db_table': 'ElevationDatumCVrequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Equipment Type',
                'db_table': 'EquipmentTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='EquipmentTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Equipment Type Request',
                'db_table': 'EquipmentTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MethodType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Method Type',
                'db_table': 'MethodTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MethodTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Method Type Request',
                'db_table': 'MethodTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OrganizationType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Organization Type',
                'db_table': 'OrganizationTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='OrganizationTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Organization Type Request',
                'db_table': 'OrganizationTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PropertyDataType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Property Data Type',
                'db_table': 'PropertyDataTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PropertyDataTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Property Data Type Request',
                'db_table': 'PropertyDataTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='QualityCode',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Quality Code',
                'db_table': 'QualityCodeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='QualityCodeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Quality Code Request',
                'db_table': 'QualityCodeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ReferenceMaterialMedium',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Reference Material Medium',
                'db_table': 'ReferenceMaterialMediumCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ReferenceMaterialMediumRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Reference Material Medium Request',
                'db_table': 'ReferenceMaterialMediumCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResultType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Result Type',
                'db_table': 'ResultTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ResultTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Result Type Request',
                'db_table': 'ResultTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SampledMedium',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Sampled Medium',
                'db_table': 'SampledMediumCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SampledMediumRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Sampled Medium Request',
                'db_table': 'SampledMediumCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SamplingFeatureGeotype',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Sampling Feature Geo-type',
                'db_table': 'SamplingFeatureGeotypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SamplingFeatureGeotypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Sampling Feature Geo-type Request',
                'db_table': 'SamplingFeatureGeotypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SamplingFeatureType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Sampling Feature Type',
                'db_table': 'SamplingFeatureTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SamplingFeatureTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Sampling Feature Type Request',
                'db_table': 'SamplingFeatureTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Site Type',
                'db_table': 'SiteTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SiteTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Site Type Request',
                'db_table': 'SiteTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpatialOffsetType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('offset1', models.TextField(db_column='offset1', blank=True)),
                ('offset2', models.TextField(db_column='offset2', blank=True)),
                ('offset3', models.TextField(db_column='offset3', blank=True)),
            ],
            options={
                'verbose_name': 'Spatial Offset Type',
                'db_table': 'SpatialOffsetTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpatialOffsetTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
                ('offset1', models.TextField(db_column='offset1', blank=True)),
                ('offset2', models.TextField(db_column='offset2', blank=True)),
                ('offset3', models.TextField(db_column='offset3', blank=True)),
            ],
            options={
                'verbose_name': 'Spatial Offset Type Request',
                'db_table': 'SpatialOffsetTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Speciation',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Speciation',
                'db_table': 'SpeciationCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpeciationRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Speciation Request',
                'db_table': 'SpeciationCVrequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpecimenMedium',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Specimen Medium',
                'db_table': 'SpecimenMediumCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpecimenMediumRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Specimen Medium Request',
                'db_table': 'SpecimenMediumCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpecimenType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Specimen Type',
                'db_table': 'SpecimenTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SpecimenTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Specimen Type Request',
                'db_table': 'SpecimenTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Status',
                'db_table': 'StatusCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='StatusRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Status Request',
                'db_table': 'StatusCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Taxonomic Classifier Type',
                'db_table': 'TaxonomicClassifierTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Taxonomical Classifier Type Request',
                'db_table': 'TaxonomicClassifierTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VariableName',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Variable Name',
                'db_table': 'VariableNameCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VariableNameRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Variable Name Request',
                'db_table': 'VariableNameCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VariableType',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Variable Type',
                'db_table': 'VariableTypeCV',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VariableTypeRequest',
            fields=[
                ('term', models.CharField(max_length=255, serialize=False, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('category', models.CharField(max_length=255)),
                ('provenance', models.TextField(blank=True)),
                ('provenance_uri', models.URLField(db_column='provenanceUri', blank=True)),
                ('note', models.TextField(blank=True)),
                ('request_id', models.CharField(default=uuid.uuid4, max_length=255, serialize=False, primary_key=True, db_column='requestId')),
                ('status', models.CharField(default='Pending', max_length=255, db_column='status', choices=[('Pending', 'Pending'), ('Rejected', 'Rejected'), ('Accepted', 'Accepted')])),
                ('date_submitted', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360372, tzinfo=utc), db_column='dateSubmitted')),
                ('date_status_changed', models.DateField(default=datetime.datetime(2015, 3, 16, 20, 20, 7, 360420, tzinfo=utc), db_column='dateStatusChanged')),
                ('request_notes', models.TextField(db_column='requestNotes')),
                ('submitter_name', models.CharField(max_length=255, db_column='submitterName')),
                ('submitter_email', models.CharField(max_length=255, db_column='submitterEmail', blank=True)),
                ('request_reason', models.CharField(max_length=255, db_column='requestReason')),
            ],
            options={
                'verbose_name': 'Variable Type Request',
                'db_table': 'VariableTypeCVRequests',
                'managed': False,
            },
            bases=(models.Model,),
        ),
    ]
